<?php

declare(strict_types=1);
/**
 * This file is part of friendsofhyperf/components.
 *
 * @link     https://github.com/friendsofhyperf/components
 * @document https://github.com/friendsofhyperf/components/blob/main/README.md
 * @contact  huangdijia@gmail.com
 */

namespace FriendsOfHyperf\Sentry;

use Hyperf\Context\ApplicationContext;
use Hyperf\Contract\ConfigInterface;
use Monolog\DateTimeImmutable;
use Monolog\Formatter\FormatterInterface;
use Monolog\Formatter\LineFormatter;
use Monolog\Handler\AbstractProcessingHandler;
use Monolog\Logger;
use Monolog\LogRecord;
use Sentry\Breadcrumb;
use Sentry\Event;
use Sentry\Monolog\CompatibilityProcessingHandlerTrait;
use Sentry\SentrySdk;
use Sentry\State\Scope;
use Throwable;

class SentryHandler extends AbstractProcessingHandler
{
    use CompatibilityProcessingHandlerTrait;

    /**
     * The current application environment (staging|preprod|prod).
     */
    protected string $environment;

    /**
     * Should represent the current version of the calling
     *             software. Can be any string (git commit, version number).
     */
    protected string $release;

    /**
     *  The formatter to use for the logs generated via handleBatch().
     */
    protected ?FormatterInterface $batchFormatter = null;

    /**
     * @param int $level The minimum logging level at which this handler will be triggered
     * @param bool $bubble Whether the messages that are handled can bubble up the stack or not
     */
    public function __construct(
        $level = Logger::DEBUG,
        bool $bubble = true,
        protected bool $reportExceptions = true,
        protected bool $useFormattedMessage = false
    ) {
        parent::__construct($level, $bubble); /* @phpstan-ignore-line */

        $container = ApplicationContext::getContainer();
        $config = $container->get(ConfigInterface::class);
        if ($environment = $config->get('sentry.environment')) {
            $this->environment = $environment;
        }
        if ($release = $config->get('sentry.release')) {
            $this->release = $release;
        }
    }

    public function handleBatch(array $records): void
    {
        $level = $this->level;

        // filter records based on their level
        $records = array_filter(
            $records,
            fn ($record) => $record['level'] >= $level
        );

        if (! $records) {
            return;
        }

        // the record with the highest severity is the "main" one
        $record = array_reduce(
            $records,
            function ($highest, $record) {
                if ($highest === null || $record['level'] > $highest['level']) {
                    return $record;
                }

                return $highest;
            }
        );

        // the other ones are added as a context item
        $logs = [];
        foreach ($records as $r) {
            $logs[] = $this->processRecord($r);
        }

        $record['context']['logs'] = (string) $this->getBatchFormatter()->formatBatch($logs);

        $this->handle($record);
    }

    /**
     * Sets the formatter for the logs generated by handleBatch().
     */
    public function setBatchFormatter(FormatterInterface $formatter): self
    {
        $this->batchFormatter = $formatter;

        return $this;
    }

    /**
     * Gets the formatter for the logs generated by handleBatch().
     */
    public function getBatchFormatter(): FormatterInterface
    {
        if (! $this->batchFormatter) {
            $this->batchFormatter = $this->getDefaultBatchFormatter();
        }

        return $this->batchFormatter;
    }

    /**
     * Set the release.
     *
     * @param string $value
     */
    public function setRelease($value): self
    {
        $this->release = $value;

        return $this;
    }

    /**
     * Set the current application environment.
     *
     * @param string $value
     */
    public function setEnvironment($value): self
    {
        $this->environment = $value;

        return $this;
    }

    /**
     * Add a breadcrumb.
     *
     * @see https://docs.sentry.io/learn/breadcrumbs/
     */
    public function addBreadcrumb(Breadcrumb $crumb): self
    {
        SentrySdk::getCurrentHub()->addBreadcrumb($crumb);

        return $this;
    }

    /**
     * @param array<string, mixed>|LogRecord $record
     */
    protected function doWrite($record): void
    {
        $exception = $record['context']['exception'] ?? null;
        $isException = $exception instanceof Throwable;
        unset($record['context']['exception']);

        if (! $this->reportExceptions && $isException) {
            return;
        }

        SentrySdk::getCurrentHub()->withScope(
            function (Scope $scope) use ($record, $isException, $exception) {
                if (! empty($record['context']['extra'])) {
                    foreach ($record['context']['extra'] as $key => $tag) {
                        $scope->setExtra($key, $tag);
                    }
                    unset($record['context']['extra']);
                }

                if (! empty($record['context']['tags'])) {
                    foreach ($record['context']['tags'] as $key => $tag) {
                        $scope->setTag($key, (string) $tag);
                    }
                    unset($record['context']['tags']);
                }

                if (! empty($record['extra'])) {
                    foreach ($record['extra'] as $key => $extra) {
                        $scope->setExtra($key, $extra);
                    }
                }

                if (! empty($record['context']['fingerprint'])) {
                    $scope->setFingerprint($record['context']['fingerprint']);
                    unset($record['context']['fingerprint']);
                }

                if (! empty($record['context']['user'])) {
                    $scope->setUser((array) $record['context']['user']);
                    unset($record['context']['user']);
                }

                $logger = ! empty($record['context']['logger']) ? $record['context']['logger'] : $record['channel'];
                unset($record['context']['logger']);

                if (! empty($record['context'])) {
                    $scope->setExtra('log_context', $record['context']);
                }

                $scope->addEventProcessor(
                    function (Event $event) use ($record, $logger) {
                        $event->setLevel($this->getSeverityFromLevel($record['level']));
                        $event->setLogger($logger);

                        if (! empty($this->environment) && ! $event->getEnvironment()) {
                            $event->setEnvironment($this->environment);
                        }

                        if (! empty($this->release) && ! $event->getRelease()) {
                            $event->setRelease($this->release);
                        }

                        if (isset($record['datetime']) && $record['datetime'] instanceof DateTimeImmutable) {
                            $event->setTimestamp($record['datetime']->getTimestamp());
                        }

                        return $event;
                    }
                );

                if ($isException) {
                    SentrySdk::getCurrentHub()->captureException($exception);
                } else {
                    SentrySdk::getCurrentHub()->captureMessage(
                        $this->useFormattedMessage || empty($record['message'])
                            ? $record['formatted']
                            : $record['message']
                    );
                }
            }
        );
    }

    protected function getDefaultFormatter(): FormatterInterface
    {
        return new LineFormatter('[%channel%] %message%');
    }

    /**
     * Gets the default formatter for the logs generated by handleBatch().
     */
    protected function getDefaultBatchFormatter(): FormatterInterface
    {
        return new LineFormatter();
    }
}
